Chest Tracker Release Beta
==
Keeps a client-side cache of chests you've opened in the past (their coords and contents). Offers a method to search through and highlight all chests which contain an item of choice. 

Included Modules <4>:
---------------------
utils.py | Adds six classes and four functions. ! MEANT TO BE IMPORTED
   > EventWrapper allows referencing event.getString('<int>') with utils.EventWrapper(event)[<int>], as well as providing iter() and len(). 
   > WorldWrapper allows referencing things like World.getBiome() as a property of utils.WorldWrapper(World).biome
   > ChatWrapper allows use of standard chat methods, as well as utils.ChatWrapper(Chat).log_fancy(<text with bukkit & color codes>). More
     info on color codes here: https://www.planetminecraft.com/blog/bukkit-color-codes/
   > HistoryWrapper allows grabbing the entire history of the chat as a list. Still WIP, for now use utils.ChatWrapper(Chat).raw_history().
   > LineWrapper adds properties of a message, allowing access to the message's author through string parsing. More features are planned, 
     such as allowing the matching of this name to a player which is currently online, and then returning a player object instead of just 
     a blank name. 
   > FakeEvent creates a class with a .getString(<id>) attribute, completely created in order to enable testing EventWrapper without
     being in game. The only method it supplies is .getString(<id>), and it is instantiated on a list. .getString(<id>) merely gets 
     list[int(<id>)], if it exists, else it returns None, similar to the .getString(<id>) behavior on a true event object.
--
ctLib.py | Adds one class, StorageBlock, and two functions, name_to_id() and make_safe(). ! MEANT TO BE IMPORTED
   > StorageBlock is a class that contains the data and position for a storage block, like a chest. Currently is very basic. Can be cast to 
     dict. 
   > name_to_id() converts the name of an item (i.e. 'quartz') into the ID (i.e. 'minecraft:quartz'). If string is already an ID, returns it.
   > make_safe() converts the address of a server from World to a safe filename to store the world's data in. 
   > id_to_name() reverses name_to_id(), returning the name if it does not have a prefix, else stripping the prefix and returning the name.
--
utils_run.py | Allows the calling of scripts with the prefix '.' <scriptname> to run u_<scriptname>.<js, py>. ! ADD TO SEND MESSAGE EVENT
   > any params that are passed after the first term are parsed to a list, and passed to a param JsMacro custom event. 
   > this event is configured such that when wrapped with utils.EventWrapper() params can be accessed through indexing, starting with [0] for 
     the first parameter. 
--
cache_chest.py | Automatically caches opened chests. Overwrites old cache when chest reopened. ! ADD TO OPEN SCREEN EVENT
 >>> Known Issues: 
   - Does not work properly when the target chest is a double chest, logging up to two copies of every double chest item. This doesn't affect 
     u_findItem.py, as .findItem <item> only looks for the prescense of an item, not the count, but this will be fixed before implementing 
     anything needing the number of items. 
 >>> Fixed Issues:
   - Opening inventory (or any other GUI with slots that wasn't a storage block) would raise a TypeError in chat. This behavior is now fixed. 
Changes:
   > chest caching now uses the .json file format, which is readable by human eyes. The chests are stored in Macros/chestTracker/. A 
     space-delimited version of the position is the name of the key, chosen so that data could be excluded by distance without fully computing
     on the contents of the chest. Also, no two blocks are at the same position, so if there were any overlaps, it would only be with the
     chest and itself. 

Included Scripts <1>: # NOTE: any file starting with 'u_' is counted by me as a script, since it is run using utils_run.py via command, instead
of by event or import.
---------------------
u_findItem.py | Allows the searching of all cached chests, and highlights chests with a match. 
 >>> .findItem minecraft:quartz
 >>> .findItem oak_planks
Changes:
   > Added a check to affirm that the block targeted is actually in the list ['chest', 'barrel', 'ender_chest']. This mainly serves to remove 
     tracked chests which no longer exist. 
   > Added a check to automatically skip blocks farther than a configurable max_scan_dist away. This is by default set to 64, can be changed
     in code. I'll add a .config command to change values like this later. 


TODO LIST FOR CHEST TRACKER FOR BLOCK GAME
==========================================
Ordered from Highest to Lowest priority, top to bottom
-----
DONE | Fix Dimensions Not Being Supported
--
DONE | Add Chest Searching Check Sphere
--
DONE | Add try/except to drop the NoneType exception pasted in chat when opening unsupported Inventories (including the player's inventory, this 
     can be quite annoying)
--
Add a wait when opening containers, so that the save occurs right when the container is closed and thus gets the player moving items inside the
container. 
--
Add self.ID to add support for modded containers
--
Add u_config.py to configure configs for the different modules, and make them load from json files in chestTracker/config
